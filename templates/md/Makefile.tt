TARGET_BASE :=<%= name %>
MD_SRC :=$(TARGET_BASE).md
TEX_SRC :=$(TARGET_BASE).src.tex
GENERATED_TEX :=$(TARGET_BASE).tex

BIB :=references.bib

TEMPLATE :=template.pandoc

# Default geometry
geometry =margin=2cm

# Build Rules
#============
default: quick
.PHONY: default

ifeq ("$(wildcard $(TEX_SRC))","")
$(GENERATED_TEX): $(MD_SRC) tex.$(TEMPLATE) $(BIB)
	pandoc \
	--biblatex \
	--template=tex.$(TEMPLATE) \
	--biblio $(BIB) \
	--variable geometry:$(geometry) \
	--variable fontsize:12pt \
	$(CLASSOPTION) \
	-s \
	$< \
	-o $@
$(TEX_SRC): $(GENERATED_TEX)
	mv $< $@
	rm $(MD_SRC)
else
$(GENERATED_TEX): $(TEX_SRC)
	cp $< $@
endif

$(TARGET_BASE).pdf: $(GENERATED_TEX)
	pdflatex $(TARGET_BASE)
	biber $(TARGET_BASE)
	pdflatex $(TARGET_BASE)
	pdflatex $(TARGET_BASE)
	$(MAKE) clean-extra

quick: $(GENERATED_TEX)
	pdflatex $(GENERATED_TEX)
	$(MAKE) clean-extra
.PHONY: quick

pdf: $(TARGET_BASE).pdf
.PHONY: pdf

tex: $(GENERATED_TEX)
.PHONY: tex

tex-src: $(TEX_SRC)
.PHONY: tex-src

draft: CLASSOPTION =--variable classoption:draft
draft: pdf
.PHONY: draft

final: CLASSOPTION =--variable classoption:final
final: pdf
.PHONY: final


# Meta Rules
#===========
print-%:
	@echo $* = $($*)
.PHONY: print-%

clean-extra:
	@-rm *.log *.aux *.bcf *.bbl *.blg *.dvi *.out *.run.xml *.lot *.lof *.toc $(GENERATED_TEX) || true
.PHONY: clean-extra

clean: clean-extra clean-pdf
.PHONY: clean

clean-pdf:
	@-rm *.pdf || true
.PHONY: clean-pdf
